

	.FUNCT	RT-HOT-KEY:ANY:1:2,KEY,BUF,?TMP1
	ASSIGNED?	'BUF /?CND1
	SET	'BUF,P-INBUF
?CND1:	EQUAL?	KEY,K-F1 \?CCL5
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE \?CCL8
	SET	'GL-WINDOW-TYPE,K-WIN-PICT
	JUMP	?CND3
?CCL8:	ICALL2	RT-UPDATE-PICT-WINDOW,TRUE-VALUE
	RTRUE	
?CCL5:	EQUAL?	KEY,K-F2 \?CCL10
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE \?CCL13
	SET	'GL-WINDOW-TYPE,K-WIN-MAP
	JUMP	?CND3
?CCL13:	ICALL2	RT-UPDATE-MAP-WINDOW,TRUE-VALUE
	RTRUE	
?CCL10:	EQUAL?	KEY,K-F3 \?CCL15
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE \?CCL18
	SET	'GL-WINDOW-TYPE,K-WIN-INVT
	JUMP	?CND3
?CCL18:	ICALL2	RT-UPDATE-INVT-WINDOW,TRUE-VALUE
	RTRUE	
?CCL15:	EQUAL?	KEY,K-F4 \?CCL20
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE \?CCL23
	SET	'GL-WINDOW-TYPE,K-WIN-STAT
	JUMP	?CND3
?CCL23:	ICALL2	RT-UPDATE-STAT-WINDOW,TRUE-VALUE
	RTRUE	
?CCL20:	EQUAL?	KEY,K-F5 \?CCL25
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE \?CCL28
	SET	'GL-WINDOW-TYPE,K-WIN-DESC
	JUMP	?CND3
?CCL28:	ICALL2	RT-UPDATE-DESC-WINDOW,TRUE-VALUE
	RTRUE	
?CCL25:	EQUAL?	KEY,K-F6 \FALSE
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE /?CND3
	SET	'GL-WINDOW-TYPE,K-WIN-NONE
?CND3:	ICALL2	V-$REFRESH,FALSE-VALUE
	ICALL1	UPDATE-STATUS-LINE
	CRLF	
	PRINTC	62
	GETB	BUF,1
	GRTR?	STACK,0 \TRUE
	ADD	BUF,2 >?TMP1
	GETB	BUF,1
	PRINTT	?TMP1,STACK
	RTRUE	


	.FUNCT	V-$INVENTORY:ANY:0:0
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE \?CCL3
	SET	'GL-WINDOW-TYPE,K-WIN-INVT
	ICALL2	V-$REFRESH,FALSE-VALUE
	RETURN	2
?CCL3:	ICALL2	RT-UPDATE-INVT-WINDOW,TRUE-VALUE
	RETURN	2


	.FUNCT	V-$DESC:ANY:0:0
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE \?CCL3
	SET	'GL-WINDOW-TYPE,K-WIN-DESC
	ICALL2	V-$REFRESH,FALSE-VALUE
	RETURN	2
?CCL3:	ICALL2	RT-UPDATE-DESC-WINDOW,TRUE-VALUE
	RETURN	2


	.FUNCT	V-$SCORE:ANY:0:0
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE \?CCL3
	SET	'GL-WINDOW-TYPE,K-WIN-STAT
	ICALL2	V-$REFRESH,FALSE-VALUE
	RETURN	2
?CCL3:	ICALL2	RT-UPDATE-STAT-WINDOW,TRUE-VALUE
	RETURN	2


	.FUNCT	V-MAP:ANY:0:0
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE \?CCL3
	SET	'GL-WINDOW-TYPE,K-WIN-MAP
	ICALL2	V-$REFRESH,FALSE-VALUE
	RETURN	2
?CCL3:	ICALL2	RT-UPDATE-MAP-WINDOW,TRUE-VALUE
	RETURN	2


	.FUNCT	V-$PICTURE:ANY:0:0
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE \?CCL3
	SET	'GL-WINDOW-TYPE,K-WIN-PICT
	ICALL2	V-$REFRESH,FALSE-VALUE
	RETURN	2
?CCL3:	ICALL2	RT-UPDATE-PICT-WINDOW,TRUE-VALUE
	RETURN	2


	.FUNCT	V-$NONE:ANY:0:0
	EQUAL?	GL-WINDOW-TYPE,K-WIN-NONE /?PRG3
	SET	'GL-WINDOW-TYPE,K-WIN-NONE
	ICALL2	V-$REFRESH,FALSE-VALUE
?PRG3:	RETURN	2


	.FUNCT	RT-BAR:ANY:2:3,TITLE,VAL,REF?,W,X,M,S,?TMP1
	WINGET	-3,K-W-XSIZE >?TMP1
	MUL	8,GL-FONT-X
	SUB	?TMP1,STACK >M
	ZERO?	REF? /?CND1
	CURSET	GL-WIN-Y,1
	PRINT	TITLE
	PRINTC	58
?CND1:	MUL	13,GL-FONT-X
	CURSET	GL-WIN-Y,STACK
	PRINTN	VAL
	ERASE	1
	CURSET	GL-WIN-Y,M
	PRINTC	124
	ADD	GL-WIN-Y,GL-FONT-Y >GL-WIN-Y
	CURSET	GL-WIN-Y,1
	DIV	M,100
	MUL	STACK,VAL >?TMP1
	MOD	M,100
	MUL	STACK,VAL
	ADD	STACK,50
	DIV	STACK,100
	ADD	?TMP1,STACK >X
	GRTR?	X,0 \?CND3
	DIV	GL-SPACE-WIDTH,2
	ADD	X,STACK
	DIV	STACK,GL-SPACE-WIDTH >S
	PUTB	K-DIROUT-TBL,0,32
	SUB	0,S
	COPYT	K-DIROUT-TBL,K-DIROUT-TBL+1,STACK
	HLIGHT	K-H-INV
	PRINTT	K-DIROUT-TBL,S
	HLIGHT	K-H-NRM
	ERASE	1
?CND3:	LESS?	VAL,100 \?CND5
	CURSET	GL-WIN-Y,M
	PRINTC	124
?CND5:	ADD	GL-WIN-Y,GL-FONT-Y >GL-WIN-Y
	CURSET	GL-WIN-Y,1
	RTRUE	


	.FUNCT	RT-UPDATE-STAT-WINDOW:ANY:0:1,REF?,?TMP1
	WINATTR	2,A-WRAP,O-CLEAR
	ZERO?	REF? \?CCL2
	EQUAL?	GL-WINDOW-TYPE,K-WIN-STAT /?CND1
?CCL2:	SET	'REF?,TRUE-VALUE
	CLEAR	2
	CLEAR	5
	CLEAR	6
?CND1:	SCREEN	2
	WINGET	2,K-W-XSIZE >?TMP1
	MUL	9,GL-FONT-X
	SUB	?TMP1,STACK
	CURSET	1,STACK
	PRINTI	"100"
	CALL2	L-PIXELS,2 >GL-WIN-Y
	ICALL	RT-BAR,STR?271,GL-SC-CHV,REF?
	ICALL	RT-BAR,STR?272,GL-SC-WIS,REF?
	ICALL	RT-BAR,STR?273,GL-SC-EXP,REF?
	ICALL	RT-BAR,STR?274,GL-SC-QST,REF?
	SET	'GL-WINDOW-TYPE,K-WIN-STAT
	SCREEN	0
	RTRUE	


	.FUNCT	RT-PUT-UP-FOO:ANY:1:3,FOO,BOLD?,STR?,W,TBL
	GET	K-WIN-TBL,2
	DIV	STACK,3
	SUB	STACK,1 >W
	SET	'TBL,K-DIROUT-TBL+2
	GET	K-WIN-TBL,1
	GRTR?	GL-WIN-Y,STACK /FALSE
	GET	K-WIN-TBL,2
	GRTR?	GL-WIN-X,STACK /FALSE
	ICALL	CCURSET,GL-WIN-Y,GL-WIN-X
	MUL	W,GL-FONT-X
	ERASE	STACK
	ZERO?	FOO /?CND5
	ZERO?	BOLD? /?CND7
	HLIGHT	K-H-BLD
?CND7:	ZERO?	STR? /?CCL11
	PRINT	FOO
	JUMP	?CND9
?CCL11:	ICALL2	RT-PRINT-DESC,FOO
?CND9:	HLIGHT	K-H-NRM
?CND5:	GET	K-WIN-TBL,1
	IGRTR?	'GL-WIN-Y,STACK \?CND12
	SET	'GL-WIN-Y,1
	ADD	GL-WIN-X,W
	ADD	STACK,2 >GL-WIN-X
?CND12:	INC	'GL-WIN-N
	RTRUE	


	.FUNCT	RT-PUT-UP-OBJS:ANY:1:1,WORN?,ANY?,OBJ
	FIRST?	CH-PLAYER >OBJ /?PRG2
?PRG2:	ZERO?	OBJ \?CCL6
	RETURN	ANY?
?CCL6:	FSET?	OBJ,FL-NO-DESC /?CND4
	FSET?	OBJ,FL-WORN /?PRD10
	PUSH	0
	JUMP	?PRD11
?PRD10:	PUSH	1
?PRD11:	EQUAL?	WORN?,STACK \?CND4
	SET	'ANY?,TRUE-VALUE
	ICALL2	RT-PUT-UP-FOO,OBJ
?CND4:	NEXT?	OBJ >OBJ /?PRG2
	JUMP	?PRG2


	.FUNCT	RT-UPDATE-INVT-WINDOW:ANY:0:1,REF?,WX,WY,W,X,Y,I,J,K,N,?PR-Y,?PR-X,?TMP1
	SCREEN	2
	WINATTR	2,A-WRAP,O-CLEAR
	WINGET	2,K-W-YSIZE
	DIV	STACK,GL-FONT-Y >WY
	WINGET	2,K-W-XSIZE
	DIV	STACK,GL-FONT-X >WX
	PUT	K-WIN-TBL,1,WY
	PUT	K-WIN-TBL,2,WX
	DIV	WX,3
	SUB	STACK,1 >W
	ZERO?	REF? \?CTR2
	EQUAL?	GL-WINDOW-TYPE,K-WIN-INVT /?CCL3
?CTR2:	CLEAR	2
	CLEAR	5
	CLEAR	6
	ADD	W,1 >?PR-X
?PRG6:	IGRTR?	'?PR-Y,WY \?CND8
	SET	'?PR-Y,1
	ADD	?PR-X,W
	ADD	STACK,2 >?PR-X
	ADD	?PR-X,W
	ADD	STACK,1
	GRTR?	STACK,WX /?REP7
?CND8:	ICALL	CCURSET,?PR-Y,?PR-X
	HLIGHT	K-H-INV
	PRINTC	32
	HLIGHT	K-H-NRM
	JUMP	?PRG6
?REP7:	SET	'J,0
	SET	'K,0
	JUMP	?CND1
?CCL3:	SHIFT	GL-WIN-N,-8
	BAND	STACK,255 >J
	BAND	GL-WIN-N,255 >K
?CND1:	SET	'GL-WIN-N,0
	SET	'GL-WIN-Y,1
	SET	'GL-WIN-X,1
	ICALL	RT-PUT-UP-FOO,STR?275,TRUE-VALUE,TRUE-VALUE
	CALL2	RT-PUT-UP-OBJS,FALSE-VALUE
	ZERO?	STACK \?CND12
	ICALL	RT-PUT-UP-FOO,STR?276,FALSE-VALUE,TRUE-VALUE
?CND12:	SET	'N,GL-WIN-N
	SET	'X,GL-WIN-X
	SET	'Y,GL-WIN-Y
	SET	'I,GL-WIN-N
?PRG14:	LESS?	I,J \?REP15
	ICALL2	RT-PUT-UP-FOO,FALSE-VALUE
	INC	'I
	JUMP	?PRG14
?REP15:	SET	'GL-WIN-N,N
	SET	'GL-WIN-X,X
	SET	'GL-WIN-Y,Y
	SET	'J,GL-WIN-N
	GRTR?	GL-WIN-Y,1 \?CND19
	MUL	W,2
	ADD	GL-WIN-X,STACK
	ADD	STACK,1
	GRTR?	STACK,WX /?CND19
	LESS?	J,K \?CND23
	DIV	K,WY >?TMP1
	DIV	J,WY
	EQUAL?	?TMP1,STACK \?CND23
	SET	'N,GL-WIN-N
	SET	'X,GL-WIN-X
	SET	'Y,GL-WIN-Y
	SET	'I,GL-WIN-N
?PRG27:	LESS?	I,K \?REP28
	ICALL2	RT-PUT-UP-FOO,FALSE-VALUE
	INC	'I
	JUMP	?PRG27
?REP28:	SET	'GL-WIN-N,N
	SET	'GL-WIN-X,X
	SET	'GL-WIN-Y,Y
?CND23:	SUB	WY,GL-WIN-Y
	ADD	GL-WIN-N,STACK
	ADD	STACK,1 >GL-WIN-N
	ADD	GL-WIN-X,W
	ADD	STACK,2 >GL-WIN-X
	SET	'GL-WIN-Y,1
?CND19:	ICALL	RT-PUT-UP-FOO,STR?277,TRUE-VALUE,TRUE-VALUE
	CALL2	RT-PUT-UP-OBJS,TRUE-VALUE
	ZERO?	STACK \?CND32
	ICALL	RT-PUT-UP-FOO,STR?276,FALSE-VALUE,TRUE-VALUE
?CND32:	SET	'N,GL-WIN-N
	SET	'X,GL-WIN-X
	SET	'Y,GL-WIN-Y
	DIV	GL-WIN-N,WY >?TMP1
	DIV	K,WY
	LESS?	?TMP1,STACK \?CND34
	SUB	WY,GL-WIN-Y
	ADD	GL-WIN-N,STACK
	ADD	STACK,1 >GL-WIN-N
	ADD	GL-WIN-X,W
	ADD	STACK,2 >GL-WIN-X
	SET	'GL-WIN-Y,1
?CND34:	SET	'I,GL-WIN-N
?PRG36:	LESS?	I,K \?REP37
	ICALL2	RT-PUT-UP-FOO,FALSE-VALUE
	INC	'I
	JUMP	?PRG36
?REP37:	SET	'GL-WIN-N,N
	SET	'GL-WIN-X,X
	SET	'GL-WIN-Y,Y
	SET	'K,GL-WIN-N
	SHIFT	J,8
	BOR	STACK,K >GL-WIN-N
	BAND	GL-UPDATE-WINDOW,-2 >GL-UPDATE-WINDOW
	SET	'GL-WINDOW-TYPE,K-WIN-INVT
	SCREEN	0
	RTRUE	


	.FUNCT	RT-UPDATE-DESC-WINDOW:ANY:0:1,REF?,Y,Y1
	SCREEN	2
	WINATTR	2,A-WRAP,O-SET
	ZERO?	REF? \?CCL2
	EQUAL?	GL-WINDOW-TYPE,K-WIN-DESC \?CCL2
	BTST	GL-UPDATE-WINDOW,4 \?CND1
?CCL2:	SET	'REF?,TRUE-VALUE
	CLEAR	2
	CLEAR	5
	CLEAR	6
	CURSET	1,1
	CALL2	DESCRIBE-ROOM,TRUE-VALUE
	ZERO?	STACK /?CCL8
	WINGET	-3,K-W-YCURPOS >GL-WIN-Y
	SET	'GL-WIN-N,GL-WIN-Y
	JUMP	?CND6
?CCL8:	SET	'GL-WIN-N,-1
?CND6:	BAND	GL-UPDATE-WINDOW,-5 >GL-UPDATE-WINDOW
?CND1:	EQUAL?	GL-WIN-N,-1 /?CND9
	ZERO?	REF? \?CCL10
	BTST	GL-UPDATE-WINDOW,2 \?CND9
?CCL10:	ZERO?	REF? \?CND15
	SET	'Y,GL-WIN-Y
?PRG17:	LESS?	Y,GL-WIN-N \?CND15
	CURSET	Y,1
	ERASE	1
	ADD	Y,GL-FONT-Y >Y
	JUMP	?PRG17
?CND15:	CURSET	GL-WIN-Y,1
	ICALL1	RT-DESCRIBE-OBJECTS
	WINGET	-3,K-W-YCURPOS >GL-WIN-N
	BAND	GL-UPDATE-WINDOW,-3 >GL-UPDATE-WINDOW
?CND9:	SET	'GL-WINDOW-TYPE,K-WIN-DESC
	SCREEN	0
	RTRUE	


	.FUNCT	RT-UPDATE-MAP-WINDOW:ANY:0:1,REF?,TBL,PTR,Y,X,?TMP2,?TMP1
	ZERO?	GL-MAP-GRID-Y \?CND1
	PICINF	K-MAP-GRID-SIZE,K-WIN-TBL /?BOGUS3
?BOGUS3:	GET	K-WIN-TBL,0 >GL-MAP-GRID-Y
	GET	K-WIN-TBL,1 >GL-MAP-GRID-X
?CND1:	SCREEN	2
	WINATTR	2,A-WRAP,O-CLEAR
	ZERO?	REF? \?CTR5
	EQUAL?	GL-WINDOW-TYPE,K-WIN-MAP \?CTR5
	ZERO?	GL-WIN-N \?CCL6
?CTR5:	ICALL1	RT-REDRAW-MAP
	ZERO?	GL-WIN-N /?CND4
	ICALL1	RT-DRAW-ROSE
	JUMP	?CND4
?CCL6:	GET	K-MAP-TBL,GL-WIN-N >TBL
	EQUAL?	HERE,RM-BOG \?CCL14
	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM \?CND12
	MUL	GL-BOG-POS,K-MAP-BOG-ENTRY-SIZE
	ADD	STACK,1
	ADD	TBL,STACK >PTR
	JUMP	?CND12
?CCL14:	ADD	TBL,1 >?TMP1
	GETB	TBL,0
	DIV	STACK,K-MAP-ENTRY-SIZE
	INTBL?	HERE,?TMP1,STACK,K-MAP-ENTRY-SIZE >PTR /?CND12
?CND12:	ZERO?	PTR /?CCL20
	ZERO?	GL-WIN-X /?CND21
	EQUAL?	PTR,GL-WIN-X /?CND21
	CALL2	RT-GET-MAP-Y,GL-WIN-X >Y
	CALL2	RT-GET-MAP-X,GL-WIN-X >X
	PICINF	K-MAP-ROOM-OFF,K-WIN-TBL /?BOGUS25
?BOGUS25:	CALL2	RT-MAP-Y,Y >?TMP2
	GET	K-WIN-TBL,0
	ADD	?TMP2,STACK >?TMP1
	CALL2	RT-MAP-X,X >?TMP2
	GET	K-WIN-TBL,1
	ADD	?TMP2,STACK
	DISPLAY	K-MAP-NOT-HERE-ROOM,?TMP1,STACK
?CND21:	SET	'GL-WIN-X,PTR
	CALL2	RT-GET-MAP-Y,PTR >Y
	CALL2	RT-GET-MAP-X,PTR >X
	PICINF	K-MAP-ROOM-OFF,K-WIN-TBL /?BOGUS26
?BOGUS26:	CALL2	RT-MAP-Y,Y >?TMP2
	GET	K-WIN-TBL,0
	ADD	?TMP2,STACK >?TMP1
	CALL2	RT-MAP-X,X >?TMP2
	GET	K-WIN-TBL,1
	ADD	?TMP2,STACK
	DISPLAY	K-MAP-HERE-ROOM,?TMP1,STACK
	ICALL	RT-DRAW-ROOM-CONNECTIONS,HERE,Y,X
	ICALL1	RT-DRAW-ROSE
	JUMP	?CND4
?CCL20:	ICALL1	RT-REDRAW-MAP
	ZERO?	GL-WIN-N /?CND4
	ICALL1	RT-DRAW-ROSE
?CND4:	SET	'GL-WINDOW-TYPE,K-WIN-MAP
	SCREEN	0
	RTRUE	


	.FUNCT	RT-FIND-MAP-TBL:ANY:1:1,RM,I,N,TBL,?TMP1
	GET	K-MAP-TBL,0 >N
	EQUAL?	RM,RM-BOG \?PRG4
	RETURN	K-MAP-BOG-TBL-NUM
?PRG4:	DLESS?	'N,0 /FALSE
	INC	'I
	EQUAL?	I,K-MAP-BOG-TBL-NUM /?PRG4
	GET	K-MAP-TBL,I >TBL
	ADD	TBL,1 >?TMP1
	GETB	TBL,0
	DIV	STACK,K-MAP-ENTRY-SIZE
	INTBL?	HERE,?TMP1,STACK,K-MAP-ENTRY-SIZE \?PRG4
	RETURN	I


	.FUNCT	RT-REDRAW-MAP:ANY:0:0,TBL,PTR,N,Y,X,RM,RM-ICON,OLD-NUM,?TMP2,?TMP1
	CLEAR	2
	CLEAR	5
	CLEAR	6
	CALL2	RT-FIND-MAP-TBL,HERE >GL-WIN-N
	ZERO?	GL-WIN-N \?CCL3
	DIROUT	K-D-TBL-ON,K-DIROUT-TBL
	PRINTI	"Mapping is not available for this area."
	DIROUT	K-D-TBL-OFF
	WINGET	2,K-W-YSIZE
	SUB	STACK,GL-FONT-Y
	DIV	STACK,2
	ADD	STACK,1 >?TMP1
	WINGET	2,K-W-XSIZE >?TMP2
	GET	0,24
	SUB	?TMP2,STACK
	DIV	STACK,2
	ADD	STACK,1
	CURSET	?TMP1,STACK
	GET	K-DIROUT-TBL,0
	PRINTT	K-DIROUT-TBL+2,STACK
	RTRUE	
?CCL3:	SCREEN	7
	DISPLAY	K-MAP-SCROLL,1,1
	SCREEN	2
	MOUSE-LIMIT	2
	GET	K-MAP-TBL,GL-WIN-N >TBL
	ADD	TBL,1 >PTR
	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM \?CCL6
	GETB	TBL,0
	DIV	STACK,K-MAP-BOG-ENTRY-SIZE >N
	SET	'OLD-NUM,GL-BOG-POS
	SET	'GL-BOG-POS,0
	JUMP	?CND4
?CCL6:	GETB	TBL,0
	DIV	STACK,K-MAP-ENTRY-SIZE >N
?CND4:	SET	'GL-WIN-X,0
?PRG7:	DLESS?	'N,0 /?REP8
	SET	'RM-ICON,FALSE-VALUE
	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM \?CCL14
	GETB	PTR,0
	ZERO?	STACK /?REP8
	EQUAL?	GL-BOG-POS,OLD-NUM \?CCL19
	SET	'GL-WIN-X,PTR
	SET	'RM-ICON,K-MAP-HERE-ROOM
	JUMP	?CND15
?CCL19:	SET	'RM-ICON,K-MAP-NOT-HERE-ROOM
?CND15:	SET	'RM,RM-BOG
	JUMP	?CND12
?CCL14:	GETB	PTR,K-MAP-ROOM >RM
	ZERO?	RM /?CND12
	FSET?	RM,FL-TOUCHED /?CCL22
	EQUAL?	RM,HERE \?CND12
?CCL22:	EQUAL?	RM,HERE \?CCL27
	SET	'GL-WIN-X,PTR
	SET	'RM-ICON,K-MAP-HERE-ROOM
	JUMP	?CND12
?CCL27:	SET	'RM-ICON,K-MAP-NOT-HERE-ROOM
?CND12:	ZERO?	RM-ICON /?CND28
	CALL2	RT-GET-MAP-Y,PTR >Y
	CALL2	RT-GET-MAP-X,PTR >X
	PICINF	K-MAP-ROOM-OFF,K-WIN-TBL /?BOGUS30
?BOGUS30:	CALL2	RT-MAP-Y,Y >?TMP2
	GET	K-WIN-TBL,0
	ADD	?TMP2,STACK >?TMP1
	CALL2	RT-MAP-X,X >?TMP2
	GET	K-WIN-TBL,1
	ADD	?TMP2,STACK
	DISPLAY	RM-ICON,?TMP1,STACK
	ICALL	RT-DRAW-ROOM-CONNECTIONS,RM,Y,X
?CND28:	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM \?CCL33
	ADD	PTR,K-MAP-BOG-ENTRY-SIZE >PTR
	INC	'GL-BOG-POS
	JUMP	?PRG7
?CCL33:	ADD	PTR,K-MAP-ENTRY-SIZE >PTR
	JUMP	?PRG7
?REP8:	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM \FALSE
	SET	'GL-BOG-POS,OLD-NUM
	RETURN	GL-BOG-POS


	.FUNCT	RT-DRAW-ROSE:ANY:0:0,X,Y,DIR,P,D,?TMP1
	PICINF	K-ROSE-BLANK,K-WIN-TBL /?BOGUS1
?BOGUS1:	GETB	0,30
	EQUAL?	STACK,MACINTOSH,DEBUGGING-ZIP \?CCL4
	SET	'Y,3
	JUMP	?CND2
?CCL4:	SET	'Y,2
?CND2:	WINGET	2,K-W-XSIZE >?TMP1
	GET	K-WIN-TBL,1
	SUB	?TMP1,STACK >X
	SET	'GL-ROSE-Y,Y
	SET	'GL-ROSE-X,X
	PICINF	K-ROSE-OFF,K-WIN-TBL /?BOGUS5
?BOGUS5:	GET	K-WIN-TBL,0
	ADD	Y,STACK >?TMP1
	GET	K-WIN-TBL,1
	ADD	X,STACK
	DISPLAY	K-ROSE-BLANK,?TMP1,STACK
	PICINF	K-ROSE-DOWN-OFF,K-WIN-TBL /?BOGUS6
?BOGUS6:	GET	K-WIN-TBL,0
	ADD	Y,STACK >?TMP1
	GET	K-WIN-TBL,1
	ADD	X,STACK
	DISPLAY	K-ROSE-UP-DN-BLANK,?TMP1,STACK
	PICINF	K-ROSE-UP-OFF,K-WIN-TBL /?BOGUS7
?BOGUS7:	GET	K-WIN-TBL,0
	ADD	Y,STACK >?TMP1
	GET	K-WIN-TBL,1
	ADD	X,STACK
	DISPLAY	K-ROSE-UP-DN-BLANK,?TMP1,STACK
?PRG8:	CALL	RT-GET-NEXT-DIR,HERE,DIR,TRUE-VALUE >DIR
	ZERO?	DIR /TRUE
	EQUAL?	DIR,P?IN,P?OUT /?PRG8
	SET	'D,FALSE-VALUE
	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM \?CCL17
	SET	'D,TRUE-VALUE
	JUMP	?CND15
?CCL17:	CALL	RT-GET-DIR-INFO,HERE,DIR
	ZERO?	STACK /?CND15
	GETB	K-DIR-INFO-TBL,1
	ZERO?	STACK /?CND15
	GETB	K-DIR-INFO-TBL,2
	ZERO?	STACK \?CND15
	SET	'D,TRUE-VALUE
?CND15:	ZERO?	D /?PRG8
	EQUAL?	DIR,P?DOWN \?CCL27
	PICINF	K-ROSE-DOWN-OFF,K-WIN-TBL /?BOGUS28
?BOGUS28:	GET	K-WIN-TBL,0
	ADD	Y,STACK >?TMP1
	GET	K-WIN-TBL,1
	ADD	X,STACK
	DISPLAY	K-ROSE-DOWN,?TMP1,STACK
	JUMP	?PRG8
?CCL27:	EQUAL?	DIR,P?UP \?CCL30
	PICINF	K-ROSE-UP-OFF,K-WIN-TBL /?BOGUS31
?BOGUS31:	GET	K-WIN-TBL,0
	ADD	Y,STACK >?TMP1
	GET	K-WIN-TBL,1
	ADD	X,STACK
	DISPLAY	K-ROSE-UP,?TMP1,STACK
	JUMP	?PRG8
?CCL30:	EQUAL?	DIR,P?NORTH \?CCL34
	SET	'P,K-ROSE-NORTH
	JUMP	?CND32
?CCL34:	EQUAL?	DIR,P?NE \?CCL36
	SET	'P,K-ROSE-NE
	JUMP	?CND32
?CCL36:	EQUAL?	DIR,P?EAST \?CCL38
	SET	'P,K-ROSE-EAST
	JUMP	?CND32
?CCL38:	EQUAL?	DIR,P?SE \?CCL40
	SET	'P,K-ROSE-SE
	JUMP	?CND32
?CCL40:	EQUAL?	DIR,P?SOUTH \?CCL42
	SET	'P,K-ROSE-SOUTH
	JUMP	?CND32
?CCL42:	EQUAL?	DIR,P?SW \?CCL44
	SET	'P,K-ROSE-SW
	JUMP	?CND32
?CCL44:	EQUAL?	DIR,P?WEST \?CCL46
	SET	'P,K-ROSE-WEST
	JUMP	?CND32
?CCL46:	EQUAL?	DIR,P?NW \?CND32
	SET	'P,K-ROSE-NW
?CND32:	PICINF	K-ROSE-OFF,K-WIN-TBL /?BOGUS48
?BOGUS48:	GET	K-WIN-TBL,0
	ADD	Y,STACK >?TMP1
	GET	K-WIN-TBL,1
	ADD	X,STACK
	DISPLAY	P,?TMP1,STACK
	JUMP	?PRG8


	.FUNCT	RT-MAP-Y:ANY:1:1,Y
	SUB	Y,1
	MUL	STACK,GL-MAP-GRID-Y
	ADD	STACK,1
	RSTACK	


	.FUNCT	RT-MAP-X:ANY:1:1,X
	SUB	X,1
	MUL	STACK,GL-MAP-GRID-X
	ADD	STACK,1
	RSTACK	


	.FUNCT	RT-GET-MAP-Y:ANY:1:1,PTR
	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM \?CCL3
	GETB	PTR,K-MAP-BOG-Y
	RSTACK	
?CCL3:	GETB	PTR,K-MAP-Y
	RSTACK	


	.FUNCT	RT-GET-MAP-X:ANY:1:1,PTR
	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM \?CCL3
	GETB	PTR,K-MAP-BOG-X
	RSTACK	
?CCL3:	GETB	PTR,K-MAP-X
	RSTACK	


	.FUNCT	RT-GET-DIR-INFO:ANY:2:2,RM,DIR,P,PS,OD
	GETPT	RM,DIR >P
	ZERO?	P /FALSE
	PUTB	K-DIR-INFO-TBL,0,0
	PUTB	K-DIR-INFO-TBL,1,FALSE-VALUE
	PUTB	K-DIR-INFO-TBL,2,FALSE-VALUE
	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM /TRUE
	PTSIZE	P >PS
	PUTB	K-DIR-INFO-TBL,0,PS
	EQUAL?	RM,RM-BOG \?CCL8
	EQUAL?	DIR,P?EAST \?CCL11
	PUTB	K-DIR-INFO-TBL,1,RM-WEST-OF-FORD
	RTRUE	
?CCL11:	EQUAL?	DIR,P?SW \TRUE
	PUTB	K-DIR-INFO-TBL,1,RM-EDGE-OF-BOG
	RTRUE	
?CCL8:	EQUAL?	PS,NEXIT /TRUE
	EQUAL?	PS,FEXIT \?CCL15
	SET	'OD,P-WALK-DIR
	SET	'P-WALK-DIR,DIR
	GET	P,FEXITFCN
	CALL	STACK,TRUE-VALUE
	PUTB	K-DIR-INFO-TBL,1,STACK
	SET	'P-WALK-DIR,OD
	RTRUE	
?CCL15:	EQUAL?	PS,DEXIT \?CCL17
	GET	P,REXIT
	PUTB	K-DIR-INFO-TBL,1,STACK
	GET	P,DEXITOBJ
	FSET?	STACK,FL-OPEN /TRUE
	PUTB	K-DIR-INFO-TBL,2,TRUE-VALUE
	RTRUE	
?CCL17:	EQUAL?	PS,UEXIT,CEXIT \TRUE
	GET	P,REXIT
	PUTB	K-DIR-INFO-TBL,1,STACK
	RTRUE	


	.FUNCT	RT-GET-NEXT-DIR:ANY:2:3,RM,DIR,ROSE?
	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM \?CCL3
	EQUAL?	GL-BOG-POS,K-BOG-NUM \?CCL6
	ZERO?	DIR \?CCL9
	RETURN	P?EAST
?CCL9:	ZERO?	ROSE? /FALSE
	EQUAL?	DIR,P?EAST \FALSE
	SUB	GL-BOG-POS,1
	GET	K-BOG-DIR-TBL,STACK
	CALL2	RT-OPPOSITE-DIR,STACK
	RSTACK	
?CCL6:	ZERO?	DIR \?CCL16
	GET	K-BOG-DIR-TBL,GL-BOG-POS
	RSTACK	
?CCL16:	ZERO?	ROSE? /?CCL18
	GRTR?	GL-BOG-POS,0 \?CCL18
	GET	K-BOG-DIR-TBL,GL-BOG-POS
	EQUAL?	DIR,STACK \?CCL18
	SUB	GL-BOG-POS,1
	GET	K-BOG-DIR-TBL,STACK
	CALL2	RT-OPPOSITE-DIR,STACK
	RSTACK	
?CCL18:	ZERO?	GL-BOG-POS \FALSE
	EQUAL?	DIR,P?SW /FALSE
	RETURN	P?SW
?CCL3:	EQUAL?	RM,RM-BOG \?CCL28
	ZERO?	DIR \?CCL31
	RETURN	P?EAST
?CCL31:	EQUAL?	DIR,P?EAST \FALSE
	RETURN	P?SW
?CCL28:	NEXTP	RM,DIR >DIR
	ZERO?	DIR /FALSE
	LESS?	DIR,LOW-DIRECTION /FALSE
	RETURN	DIR


	.FUNCT	RT-OPPOSITE-DIR:ANY:1:1,DIR
	EQUAL?	DIR,P?NORTH \?CCL3
	RETURN	P?SOUTH
?CCL3:	EQUAL?	DIR,P?NE \?CCL5
	RETURN	P?SW
?CCL5:	EQUAL?	DIR,P?EAST \?CCL7
	RETURN	P?WEST
?CCL7:	EQUAL?	DIR,P?SE \?CCL9
	RETURN	P?NW
?CCL9:	EQUAL?	DIR,P?SOUTH \?CCL11
	RETURN	P?NORTH
?CCL11:	EQUAL?	DIR,P?SW \?CCL13
	RETURN	P?NE
?CCL13:	EQUAL?	DIR,P?WEST \?CCL15
	RETURN	P?EAST
?CCL15:	EQUAL?	DIR,P?NW \?CCL17
	RETURN	P?SE
?CCL17:	EQUAL?	DIR,P?UP \?CCL19
	RETURN	P?DOWN
?CCL19:	EQUAL?	DIR,P?DOWN \?CCL21
	RETURN	P?UP
?CCL21:	EQUAL?	DIR,P?IN \?CCL23
	RETURN	P?OUT
?CCL23:	EQUAL?	DIR,P?OUT \FALSE
	RETURN	P?IN


	.FUNCT	RT-DRAW-ROOM-CONNECTIONS:ANY:3:3,RM,Y,X,DIR,P,PS,TO-RM,TBL,CLSD?,OD,?TMP1
	SET	'OD,P-WALK-DIR
	GET	K-MAP-TBL,GL-WIN-N >TBL
?PRG1:	SET	'CLSD?,FALSE-VALUE
	CALL	RT-GET-NEXT-DIR,RM,DIR >DIR
	ZERO?	DIR /?REP2
	SET	'P-WALK-DIR,DIR
	EQUAL?	DIR,P?IN,P?OUT /?PRG1
	EQUAL?	DIR,P?UP \?CCL9
	EQUAL?	RM,RM-CIRC-ROOM,RM-STAIRS-1,RM-STAIRS-2 /?CCL9
	EQUAL?	RM,RM-CELLAR,RM-UG-CHAMBER,RM-RAVEN-TREE /?CCL9
	EQUAL?	RM,RM-GROVE \?PRG1
?CCL9:	EQUAL?	DIR,P?DOWN \?CCL16
	EQUAL?	RM,RM-CIRC-ROOM,RM-LANDING,RM-STAIRS-1 /?CCL16
	EQUAL?	RM,RM-STAIRS-2,RM-ISLAND,RM-RAVEN-NEST /?CCL16
	EQUAL?	RM,RM-RAVEN-TREE,RM-SMITHY \?PRG1
?CCL16:	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM /?CND5
	CALL	RT-GET-DIR-INFO,RM,DIR
	ZERO?	STACK /?PRG1
	GETB	K-DIR-INFO-TBL,1 >TO-RM
	ZERO?	TO-RM /?PRG1
	GETB	K-DIR-INFO-TBL,0 >PS
	GETB	K-DIR-INFO-TBL,2 >CLSD?
	EQUAL?	RM,RM-PARADE-AREA \?PRD30
	EQUAL?	DIR,P?WEST /?CCL28
?PRD30:	EQUAL?	RM,RM-CASTLE-GATE \?CND27
	EQUAL?	DIR,P?EAST \?CND27
?CCL28:	SET	'CLSD?,1
?CND27:	EQUAL?	DIR,P?SOUTH,P?EAST,P?NE /?CCL36
	EQUAL?	DIR,P?SE,P?DOWN \?CND5
?CCL36:	FSET?	TO-RM,FL-TOUCHED \?CND5
	ADD	TBL,1 >?TMP1
	GETB	TBL,0
	DIV	STACK,K-MAP-ENTRY-SIZE
	INTBL?	TO-RM,?TMP1,STACK,K-MAP-ENTRY-SIZE /?PRG1
?CND5:	ICALL	RT-DRAW-CONNECTOR,RM,Y,X,TO-RM,CLSD?
	JUMP	?PRG1
?REP2:	SET	'P-WALK-DIR,OD
	RETURN	P-WALK-DIR


	.FUNCT	RT-DRAW-CONNECTOR:ANY:5:5,RM,Y,X,TO-RM,CLSD?,TBL,ICON,BIG,TO-Y,TO-X,?TMP2,?TMP1
	EQUAL?	P-WALK-DIR,P?NORTH,P?SOUTH \?CCL3
	ZERO?	CLSD? /?CCL7
	SET	'ICON,K-MAP-N-S-CLSD
	JUMP	?CND5
?CCL7:	SET	'ICON,K-MAP-N-S-CONN
?CND5:	SET	'BIG,K-MAP-BIG-N-S-CONN
	EQUAL?	P-WALK-DIR,P?NORTH \?CCL10
	PICINF	K-MAP-N-OFF,K-WIN-TBL /?CND1
	JUMP	?CND1
?CCL10:	PICINF	K-MAP-S-OFF,K-WIN-TBL /?CND1
	JUMP	?CND1
?CCL3:	EQUAL?	P-WALK-DIR,P?EAST,P?WEST \?CCL14
	ZERO?	CLSD? /?CCL18
	SET	'ICON,K-MAP-E-W-CLSD
	JUMP	?CND16
?CCL18:	SET	'ICON,K-MAP-E-W-CONN
?CND16:	SET	'BIG,K-MAP-BIG-E-W-CONN
	EQUAL?	P-WALK-DIR,P?EAST \?CCL21
	PICINF	K-MAP-E-OFF,K-WIN-TBL /?CND1
	JUMP	?CND1
?CCL21:	PICINF	K-MAP-W-OFF,K-WIN-TBL /?CND1
	JUMP	?CND1
?CCL14:	EQUAL?	P-WALK-DIR,P?NE,P?SW \?CCL25
	EQUAL?	RM,RM-ABOVE-MEADOW \?PRD31
	EQUAL?	P-WALK-DIR,P?NE /?CTR28
?PRD31:	EQUAL?	RM,RM-ABOVE-MOOR \?CCL29
	EQUAL?	P-WALK-DIR,P?SW \?CCL29
?CTR28:	FSET?	RM-ABOVE-EDGE-OF-WOODS,FL-TOUCHED /?CTR37
	FSET?	RM-ABOVE-TOWN,FL-TOUCHED \?CCL38
?CTR37:	SET	'ICON,K-MAP-NW-SW-CONN
	JUMP	?CND27
?CCL38:	SET	'ICON,K-MAP-NE-SW-CONN
	JUMP	?CND27
?CCL29:	EQUAL?	RM,RM-ABOVE-TOWN \?PRD44
	EQUAL?	P-WALK-DIR,P?NE /?CTR41
?PRD44:	EQUAL?	RM,RM-ABOVE-BOG \?CCL42
	EQUAL?	P-WALK-DIR,P?SW \?CCL42
?CTR41:	FSET?	RM-ABOVE-MOOR,FL-TOUCHED /?CTR50
	FSET?	RM-ABOVE-CASTLE,FL-TOUCHED \?CCL51
?CTR50:	SET	'ICON,K-MAP-NW-SW-CONN
	JUMP	?CND27
?CCL51:	SET	'ICON,K-MAP-NE-SW-CONN
	JUMP	?CND27
?CCL42:	ZERO?	CLSD? /?CCL55
	SET	'ICON,K-MAP-NE-SW-CLSD
	JUMP	?CND27
?CCL55:	SET	'ICON,K-MAP-NE-SW-CONN
?CND27:	SET	'BIG,K-MAP-BIG-NE-SW-CONN
	EQUAL?	P-WALK-DIR,P?NE \?CCL58
	PICINF	K-MAP-NE-OFF,K-WIN-TBL /?CND1
	JUMP	?CND1
?CCL58:	PICINF	K-MAP-SW-OFF,K-WIN-TBL /?CND1
	JUMP	?CND1
?CCL25:	EQUAL?	P-WALK-DIR,P?NW,P?SE \?CCL62
	EQUAL?	RM,RM-ABOVE-EDGE-OF-WOODS \?PRD68
	EQUAL?	P-WALK-DIR,P?SE /?CTR65
?PRD68:	EQUAL?	RM,RM-ABOVE-TOWN \?CCL66
	EQUAL?	P-WALK-DIR,P?NW \?CCL66
?CTR65:	FSET?	RM-ABOVE-MEADOW,FL-TOUCHED /?CTR74
	FSET?	RM-ABOVE-MOOR,FL-TOUCHED \?CCL75
?CTR74:	SET	'ICON,K-MAP-NW-SW-CONN
	JUMP	?CND64
?CCL75:	SET	'ICON,K-MAP-NW-SE-CONN
	JUMP	?CND64
?CCL66:	EQUAL?	RM,RM-ABOVE-MOOR \?PRD81
	EQUAL?	P-WALK-DIR,P?SE /?CTR78
?PRD81:	EQUAL?	RM,RM-ABOVE-CASTLE \?CCL79
	EQUAL?	P-WALK-DIR,P?NW \?CCL79
?CTR78:	FSET?	RM-ABOVE-BOG,FL-TOUCHED /?CTR87
	FSET?	RM-ABOVE-TOWN,FL-TOUCHED \?CCL88
?CTR87:	SET	'ICON,K-MAP-NW-SW-CONN
	JUMP	?CND64
?CCL88:	SET	'ICON,K-MAP-NW-SE-CONN
	JUMP	?CND64
?CCL79:	ZERO?	CLSD? /?CCL92
	SET	'ICON,K-MAP-NW-SE-CLSD
	JUMP	?CND64
?CCL92:	SET	'ICON,K-MAP-NW-SE-CONN
?CND64:	SET	'BIG,K-MAP-BIG-NW-SE-CONN
	EQUAL?	P-WALK-DIR,P?NW \?CCL95
	PICINF	K-MAP-NW-OFF,K-WIN-TBL /?CND1
	JUMP	?CND1
?CCL95:	PICINF	K-MAP-SE-OFF,K-WIN-TBL /?CND1
	JUMP	?CND1
?CCL62:	EQUAL?	P-WALK-DIR,P?UP,P?DOWN \?CND1
	SET	'ICON,K-MAP-UP-N-CONN
	SET	'BIG,K-MAP-BIG-UP-N-CONN
	EQUAL?	P-WALK-DIR,P?UP \?CCL101
	PICINF	K-MAP-UP-OFF,K-WIN-TBL /?CND1
	JUMP	?CND1
?CCL101:	PICINF	K-MAP-DN-OFF,K-WIN-TBL /?CND1
?CND1:	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM /?PRG125
	ZERO?	TO-RM /?CCL107
	GET	K-MAP-TBL,GL-WIN-N >TBL
	ADD	TBL,1 >?TMP1
	GETB	TBL,0
	DIV	STACK,K-MAP-ENTRY-SIZE
	INTBL?	TO-RM,?TMP1,STACK,K-MAP-ENTRY-SIZE >TBL \?CCL107
	GETB	TBL,K-MAP-Y >TO-Y
	GETB	TBL,K-MAP-X >TO-X
	JUMP	?PRG125
?CCL107:	EQUAL?	P-WALK-DIR,P?NORTH,P?UP \?CCL111
	SET	'TO-Y,0
	SET	'TO-X,X
	JUMP	?PRG125
?CCL111:	EQUAL?	P-WALK-DIR,P?SOUTH,P?DOWN \?CCL113
	SET	'TO-Y,6
	SET	'TO-X,X
	JUMP	?PRG125
?CCL113:	EQUAL?	P-WALK-DIR,P?EAST \?CCL115
	SET	'TO-Y,Y
	ADD	X,1 >TO-X
	JUMP	?PRG125
?CCL115:	EQUAL?	P-WALK-DIR,P?WEST \?CCL117
	SET	'TO-Y,Y
	SUB	X,1 >TO-X
	JUMP	?PRG125
?CCL117:	EQUAL?	P-WALK-DIR,P?NE \?CCL119
	SET	'TO-Y,0
	ADD	X,Y >TO-X
	JUMP	?PRG125
?CCL119:	EQUAL?	P-WALK-DIR,P?NW \?CCL121
	SET	'TO-Y,0
	SUB	X,Y >TO-X
	JUMP	?PRG125
?CCL121:	EQUAL?	P-WALK-DIR,P?SE \?CCL123
	SET	'TO-Y,6
	SUB	6,Y
	ADD	X,STACK >TO-X
	JUMP	?PRG125
?CCL123:	EQUAL?	P-WALK-DIR,P?SW \?PRG125
	SET	'TO-Y,6
	SUB	6,Y
	SUB	X,STACK >TO-X
?PRG125:	CALL2	RT-MAP-Y,Y >?TMP2
	GET	K-WIN-TBL,0
	ADD	?TMP2,STACK >?TMP1
	CALL2	RT-MAP-X,X >?TMP2
	GET	K-WIN-TBL,1
	ADD	?TMP2,STACK
	DISPLAY	ICON,?TMP1,STACK
	EQUAL?	GL-WIN-N,K-MAP-BOG-TBL-NUM /TRUE
	EQUAL?	P-WALK-DIR,P?NORTH,P?NW,P?NE /?CTR130
	EQUAL?	P-WALK-DIR,P?UP \?CCL131
?CTR130:	DLESS?	'Y,1 \?CND127
	RTRUE	
?CCL131:	EQUAL?	P-WALK-DIR,P?SOUTH,P?SW,P?SE /?CCL136
	EQUAL?	P-WALK-DIR,P?DOWN \?CND127
?CCL136:	IGRTR?	'Y,5 /TRUE
?CND127:	EQUAL?	P-WALK-DIR,P?WEST,P?NW,P?SW \?CCL143
	DLESS?	'X,1 \?CND141
	RTRUE	
?CCL143:	EQUAL?	P-WALK-DIR,P?EAST,P?NE,P?SE \?CND141
	IGRTR?	'X,14 /TRUE
?CND141:	EQUAL?	Y,TO-Y \?CCL151
	EQUAL?	X,TO-X /TRUE
?CCL151:	PICINF	K-MAP-ROOM-OFF,K-WIN-TBL+4 /?BOGUS154
?BOGUS154:	CALL2	RT-MAP-Y,Y >?TMP2
	GET	K-WIN-TBL,2
	ADD	?TMP2,STACK >?TMP1
	CALL2	RT-MAP-X,X >?TMP2
	GET	K-WIN-TBL,3
	ADD	?TMP2,STACK
	DISPLAY	BIG,?TMP1,STACK
	JUMP	?PRG125


	.FUNCT	RT-CENTER-PIC:ANY:1:2,N,SAVE?,X,Y
	PICINF	N,K-WIN-TBL /?BOGUS1
?BOGUS1:	GET	K-WIN-TBL,0 >Y
	GET	K-WIN-TBL,1 >X
	WINGET	-3,K-W-YSIZE
	SUB	STACK,Y
	DIV	STACK,2
	ADD	STACK,1 >Y
	WINGET	-3,K-W-XSIZE
	SUB	STACK,X
	DIV	STACK,2
	ADD	STACK,1 >X
	DISPLAY	N,Y,X
	ZERO?	SAVE? /TRUE
	SET	'GL-WIN-N,N
	SET	'GL-WIN-Y,Y
	SET	'GL-WIN-X,X
	RTRUE	


	.FUNCT	RT-UPDATE-PICT-WINDOW:ANY:0:1,REF?,STAMP,OFF,ST?,?TMP1
	SCREEN	2
	WINATTR	2,A-WRAP,O-CLEAR
	EQUAL?	GL-WINDOW-TYPE,K-WIN-PICT \?CCL2
	ZERO?	GL-WIN-N /?CCL2
	EQUAL?	GL-WIN-N,K-PIC-PARADE-AREA,K-PIC-AIR-SCENE \?CND1
	EQUAL?	GL-PICTURE-NUM,GL-WIN-N /?CND1
?CCL2:	SET	'REF?,TRUE-VALUE
?CND1:	ZERO?	REF? /?CCL10
	CLEAR	2
	CLEAR	5
	CLEAR	6
	SCREEN	2
	JUMP	?CND8
?CCL10:	GRTR?	GL-WIN-N,0 \?CND8
	EQUAL?	GL-PICTURE-NUM,GL-WIN-N /?CND8
	DCLEAR	GL-WIN-N,GL-WIN-Y,GL-WIN-X
?CND8:	ZERO?	GL-PICTURE-NUM /?CND14
	GETB	K-STAMP-PICTURES,0
	INTBL?	GL-PICTURE-NUM,K-STAMP-PICTURES+1,STACK,1 >ST? /?BOGUS16
?BOGUS16:	ZERO?	REF? \?CCL18
	ZERO?	ST? \?CCL18
	EQUAL?	GL-PICTURE-NUM,GL-WIN-N /?CND17
?CCL18:	ICALL	RT-CENTER-PIC,GL-PICTURE-NUM,TRUE-VALUE
?CND17:	ZERO?	ST? /?CND14
	EQUAL?	GL-PICTURE-NUM,K-PIC-CHURCHYARD \?CCL26
	IN?	TH-STONE,RM-CHURCHYARD \?CND24
	SET	'OFF,K-PIC-STONE-1-OFF
	SET	'STAMP,K-PIC-STONE-1
	JUMP	?CND24
?CCL26:	EQUAL?	GL-PICTURE-NUM,K-PIC-GRAVESTONE \?CCL30
	IN?	TH-STONE,RM-CHURCHYARD \?CND24
	SET	'OFF,K-PIC-STONE-2-OFF
	SET	'STAMP,K-PIC-STONE-2
	JUMP	?CND24
?CCL30:	EQUAL?	GL-PICTURE-NUM,K-PIC-GLADE-ROCK \?CCL34
	IN?	CH-LEPRECHAUN,RM-GLADE \?CND24
	IN?	TH-SPICE-BOTTLE,CH-LEPRECHAUN \?CCL39
	SET	'OFF,K-PIC-LEP-BOTTLE-OFF
	SET	'STAMP,K-PIC-LEP-BOTTLE
	JUMP	?CND24
?CCL39:	SET	'OFF,K-PIC-LEP-WALK-OFF
	SET	'STAMP,K-PIC-LEP-WALK
	JUMP	?CND24
?CCL34:	EQUAL?	GL-PICTURE-NUM,K-PIC-GIRL \?CCL41
	IN?	TH-GOLD-KEY,CH-GIRL \?CND24
	SET	'OFF,K-PIC-KEY-1-OFF
	SET	'STAMP,K-PIC-KEY-1
	JUMP	?CND24
?CCL41:	EQUAL?	GL-PICTURE-NUM,K-PIC-DEMON \?CCL45
	IN?	TH-GOLD-KEY,CH-DEMON \?CND24
	SET	'OFF,K-PIC-KEY-2-OFF
	SET	'STAMP,K-PIC-KEY-2
	JUMP	?CND24
?CCL45:	EQUAL?	GL-PICTURE-NUM,K-PIC-RAVEN-NEST \?CCL49
	IN?	TH-RAVEN-EGG,RM-RAVEN-NEST /?CCL51
	IN?	TH-BRASS-EGG,RM-RAVEN-NEST \?CND24
?CCL51:	SET	'OFF,K-PIC-EGG-OFF
	SET	'STAMP,K-PIC-EGG
	JUMP	?CND24
?CCL49:	EQUAL?	GL-PICTURE-NUM,K-PIC-SOUTH-OF-CHASM \?CCL55
	FSET?	TH-BOAR,FL-ALIVE /?CND24
	SET	'OFF,K-PIC-DEAD-BOAR-OFF
	SET	'STAMP,K-PIC-DEAD-BOAR
	JUMP	?CND24
?CCL55:	EQUAL?	GL-PICTURE-NUM,K-PIC-NORTH-OF-CHASM \?CCL59
	FSET?	TH-BOAR,FL-ALIVE \?CND24
	ZERO?	GL-BOAR-NUM \?CCL64
	SET	'OFF,K-PIC-PACING-BOAR-OFF
	SET	'STAMP,K-PIC-PACING-BOAR
	JUMP	?CND24
?CCL64:	EQUAL?	GL-BOAR-NUM,1 \?CCL66
	SET	'OFF,K-PIC-ALERT-BOAR-OFF
	SET	'STAMP,K-PIC-ALERT-BOAR
	JUMP	?CND24
?CCL66:	SET	'OFF,K-PIC-CHARGING-BOAR-OFF
	SET	'STAMP,K-PIC-CHARGING-BOAR
	JUMP	?CND24
?CCL59:	EQUAL?	GL-PICTURE-NUM,K-PIC-CHAMBER \?CCL68
	IN?	TH-GAUNTLET,TH-BIER \?CND24
	FSET?	TH-GAUNTLET,FL-TOUCHED /?CND24
	SET	'OFF,K-PIC-GAUNTLET1-OFF
	SET	'STAMP,K-PIC-GAUNTLET1
	JUMP	?CND24
?CCL68:	EQUAL?	GL-PICTURE-NUM,K-PIC-WINDOW \?CCL74
	IN?	TH-GAUNTLET,TH-BIER \?CND24
	FSET?	TH-GAUNTLET,FL-TOUCHED /?CND24
	SET	'OFF,K-PIC-GAUNTLET2-OFF
	SET	'STAMP,K-PIC-GAUNTLET2
	JUMP	?CND24
?CCL74:	EQUAL?	GL-PICTURE-NUM,K-PIC-ISLAND \?CND24
	FSET?	LG-SILVER-DOOR,FL-OPEN \?CND24
	SET	'OFF,K-PIC-ISLAND-DOOR-OFF
	SET	'STAMP,K-PIC-ISLAND-DOOR
?CND24:	ZERO?	OFF /?CND14
	PICINF	OFF,K-WIN-TBL /?BOGUS84
?BOGUS84:	GET	K-WIN-TBL,0
	ADD	GL-WIN-Y,STACK >?TMP1
	GET	K-WIN-TBL,1
	ADD	GL-WIN-X,STACK
	DISPLAY	STAMP,?TMP1,STACK
?CND14:	ZERO?	REF? /?CND85
	SCREEN	7
	ICALL2	RT-CENTER-PIC,K-PIC-BANNER
	SCREEN	2
	EQUAL?	GL-PICTURE-NUM,K-PIC-PARADE-AREA,K-PIC-AIR-SCENE \?CND85
	ICALL	RT-CENTER-PIC,GL-PICTURE-NUM,TRUE-VALUE
?CND85:	SET	'GL-WINDOW-TYPE,K-WIN-PICT
	SCREEN	0
	RTRUE	


	.FUNCT	V-$P:ANY:0:0
	PICINF	P-NUMBER,K-WIN-TBL \?CCL3
	ZERO?	P-NUMBER \?CCL6
	PRINTI	"Last picture number is "
	GET	K-WIN-TBL,0
	PRINTN	STACK
	PRINTR	"."
?CCL6:	GET	K-WIN-TBL,0
	PRINTN	STACK
	PRINTC	120
	GET	K-WIN-TBL,1
	PRINTN	STACK
	CRLF	
	RTRUE	
?CCL3:	PRINTR	"No such picture."


	.FUNCT	V-$D:ANY:0:0
	PICINF	P-NUMBER,K-WIN-TBL \?CCL3
	SCREEN	7
	CLEAR	7
	ICALL2	RT-CENTER-PIC,P-NUMBER
	INPUT	1
	SCREEN	0
	CALL2	V-$REFRESH,FALSE-VALUE
	RSTACK	
?CCL3:	PRINTR	"No such picture."


	.FUNCT	V-$SHOW:ANY:0:0,P,N,C
	PICINF	0,K-WIN-TBL /?BOGUS1
?BOGUS1:	GET	K-WIN-TBL,0 >N
	SET	'P,0
?PRG2:	PICINF	P,K-WIN-TBL \?PRG2
	SCREEN	7
	CLEAR	7
	CURSET	1,1
	PRINTI	"Picture #"
	PRINTN	P
	PRINTI	". [Q]uit, [+F] to advance, [-B] to back up.
"
	ICALL2	RT-CENTER-PIC,P
	INPUT	1 >C
	EQUAL?	C,113,81 \?CCL8
	SCREEN	0
	ICALL2	V-$REFRESH,FALSE-VALUE
	RTRUE	
?CCL8:	EQUAL?	C,45,98,66 \?CCL10
	DLESS?	'P,1 \?PRG2
	SET	'P,N
	JUMP	?PRG2
?CCL10:	IGRTR?	'P,N \?PRG2
	SET	'P,1
	JUMP	?PRG2


	.FUNCT	V-$W:ANY:0:0,WIN,A,TMP
	SET	'WIN,P-NUMBER
	LESS?	WIN,0 /?CCL2
	GRTR?	WIN,7 \?CND1
?CCL2:	PRINTR	"No such window."
?CND1:	PRINTC	35
	PRINTN	WIN
	PRINTI	" at "
	WINGET	WIN,K-W-YPOS
	PRINTN	STACK
	PRINTC	44
	WINGET	WIN,K-W-XPOS
	PRINTN	STACK
	PRINTI	"; size "
	WINGET	WIN,K-W-YSIZE
	PRINTN	STACK
	PRINTC	120
	WINGET	WIN,K-W-XSIZE
	PRINTN	STACK
	WINGET	WIN,K-W-LMARG
	ZERO?	STACK \?CCL6
	WINGET	WIN,K-W-RMARG
	ZERO?	STACK /?CND5
?CCL6:	PRINTI	" ("
	WINGET	WIN,K-W-LMARG
	PRINTN	STACK
	PRINTI	"<->"
	WINGET	WIN,K-W-RMARG
	PRINTN	STACK
	PRINTC	41
?CND5:	WINGET	WIN,K-W-HLIGHT >TMP
	ZERO?	TMP /?CND9
	PRINTI	"; HL="
	PRINTN	TMP
?CND9:	WINGET	WIN,K-W-COLOR >TMP
	EQUAL?	TMP,257 /?CND11
	PRINTI	"; C="
	SHIFT	TMP,-8
	PRINTN	STACK
	PRINTC	44
	BAND	TMP,255
	PRINTN	STACK
?CND11:	WINGET	WIN,K-W-FONT >TMP
	ZERO?	TMP /?CND13
	PRINTI	"; F="
	PRINTN	TMP
?CND13:	WINGET	WIN,K-W-FONTSIZE >TMP
	SHIFT	TMP,-8
	EQUAL?	STACK,GL-FONT-Y \?CCL16
	BAND	TMP,255
	EQUAL?	STACK,GL-FONT-X /?CND15
?CCL16:	PRINTI	"; FS="
	SHIFT	TMP,-8
	PRINTN	STACK
	PRINTC	120
	BAND	TMP,255
	PRINTN	STACK
?CND15:	PRINTI	"; cursor "
	WINGET	WIN,K-W-YCURPOS
	PRINTN	STACK
	PRINTC	44
	WINGET	WIN,K-W-XCURPOS
	PRINTN	STACK
	PRINTI	"; line "
	WINGET	WIN,K-W-MORE
	PRINTN	STACK
	WINGET	WIN,K-W-CRCNT >TMP
	ZERO?	TMP /?CND19
	WINGET	WIN,K-W-CRFCN
	ZERO?	STACK /?CND19
	PRINTI	"; CR="
	PRINTN	TMP
?CND19:	PRINTI	"; "
	WINGET	WIN,K-W-ATTR >A
	BTST	A,1 /?CCL25
	PRINTC	45
	JUMP	?CND23
?CCL25:	PRINTC	43
?CND23:	PRINTI	"W,"
	BTST	A,2 /?CCL28
	PRINTC	45
	JUMP	?CND26
?CCL28:	PRINTC	43
?CND26:	PRINTI	"S,"
	BTST	A,4 /?CCL31
	PRINTC	45
	JUMP	?CND29
?CCL31:	PRINTC	43
?CND29:	PRINTI	"P,"
	BTST	A,8 /?CCL34
	PRINTC	45
	JUMP	?CND32
?CCL34:	PRINTC	43
?CND32:	PRINTR	"B"

	.ENDI
